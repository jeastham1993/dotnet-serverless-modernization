{
  "Comment": "A description of my state machine",
  "StartAt": "Check Stock",
  "States": {
    "Check Stock": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${CheckStockFunction}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Price Order",
      "Catch": [
        {
          "ErrorEquals": [
            "OrderNotInStockException"
          ],
          "Next": "Notify Customer Order Not in Stock"
        }
      ]
    },
    "Notify Customer Order Not in Stock": {
      "Type": "Pass",
      "End": true
    },
    "Price Order": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${PriceOrderFunction}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "End": true,
      "Catch": [
        {
          "ErrorEquals": [
            "OrderNotInStockException"
          ],
          "Next": "Notify Customer Order Not in Stock"
        }
      ]
    }
  }
}